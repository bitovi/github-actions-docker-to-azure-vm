name: 'Deploy Docker to Azure VM'
description: 'Deploy a Docker app to an Azure VM with Docker Compose'
branding:
  icon: upload-cloud
  color: red
inputs:

  # Azure
  AZURE_ARM_CLIENT_ID:
    description: 'Azure client ID'
    required: true
  AZURE_ARM_CLIENT_SECRET:
    description: 'Azure client secret'
    required: true
  AZURE_ARM_SUBSCRIPTION_ID:
    description: 'Azure subscription ID'
    required: true
  AZURE_ARM_TENANT_ID:
    description: 'Azure tenant ID'
    required: true
  AZURE_DEFAULT_REGION:
    description: 'Azure default region'
    required: true
    default: 'eastus'
  AZURE_STORAGE_ACCOUNT:
    description: 'Azure storage account name'
    required: true
    default: 'bitops'
  AZURE_STORAGE_SKU:
    description: 'Azure storage account SKU'
    required: true
    default: 'Standard_LRS'

  # TODO: Support Bastion
  # Azure Bastion Service enables you to securely and seamlessly RDP & SSH to your VMs in your Azure virtual network, without exposing a public 
  # IP on the VM, directly from the Azure portal, without the need of any additional client/agent or any piece of software.

  # For remote connectivity:
  # TODO: Port prerequisite not met. Add an inbound network security group rule with destination port 22.

  # Terraform
  tf_state_bucket:
    description: 'Backend Bucket to use for Terraform state. Defaults to `${org}-${repo}-{branch}-tf-state`'
    required: true
  tf_state_bucket_destroy:
    description: 'Force purge and deletion of bucket on destroy. Any file contained there will be destroyed. `stack_destroy` must also be `true`'
    required: false
    default: 'true'
  azure_resource_identifier:
    description: 'Set to override the Azure resource identifier for the deployment.  Defaults to `${org}-{repo}-{branch}`.  Use with destroy to destroy specific resources.'
    required: true
  azure_vm_admin_username:
    description: 'Set to override the Azure VM username for the deployment.  Defaults to `ubuntu`.'
    required: true
    default: 'ubuntu'
  azure_vm_admin_password:
    description: 'Set to override the Azure VM password for the deployment.  Defaults to `insecurePasswordABC123@`. Prefer GH Secrets.'
    required: true
    default: 'insecurePasswordABC123@'

  # Application
  docker_full_cleanup:
    description: 'Set to true to run docker-compose down and docker system prune --all --force --volumes after.'
    required: false
  app_directory:
    description: 'Relative path for the directory of the app (i.e. where `Dockerfile` and `docker-compose.yaml` files are located). This is the directory that is copied to the EC2 instance.  Default is the root of the repo. Add a .gha-ignore file with a list of files to be exluded.'
  app_directory_cleanup:
    description: 'Will generate a timestamped compressed file and delete the app repo directory.'
    required: false
  app_port:
    description: 'Port to expose for the app'
    required: false
  lb_port:
    description: 'Load balancer listening port. Defaults to 80 if NO FQDN provided, 443 if FQDN provided'
    required: false
  lb_healthcheck: 
    description: 'Load balancer health check string. Defaults to HTTP:app_port'
    required: false
  
  # Stack management
  stack_destroy:
    description: 'Set to "true" to Destroy the stack. Will delete the elb_logs bucket after the destroy action runs.'
    required: false
    default: 'false'
  
  # Domains
  domain_name:
    description: 'Define the root domain name for the application. e.g. app.com'
    required: false
  sub_domain:
    description: 'Define the sub-domain part of the URL. Defaults to `${org}-${repo}-{branch}`'
  root_domain:
    description: 'Deploy to root domain. Will generate two DNS recrods, one for root, another for www'
    required: false
  cert_arn:
    description: 'Define the certificate ARN to use for the application'
    required: false
  create_root_cert:
    description: 'Generates and manage the root cert for the application'
    required: false
  create_sub_cert: 
    description: 'Generates and manage the sub-domain certificate for the application'
    required: false
  no_cert:
    description: 'Makes the application not to use a certificate by disabling certificate lookup.'
    required: false
    
  # Terraform
  targets:
    description: 'A list of targets to create before the full stack creation. Example: `'
  additional_tags:
    description: 'A JSON object of additional tags that will be included on created resources. Example: `{"key1": "value1", "key2": "value2"}`'
    required: false

  # Ansible
  application_mount_target:
    description: "Directory path in application env to mount directory, default is `data`"
    default: data
  data_mount_target:
    description: "Directory path within docker env to mount directory to, default is `/data`"
  # efs_mount_target:
  #   description: "Directory path in efs to mount directory to, default is `/`"

  # BitOps
  DEBUG_MODE:
    description: 'Set to "true" to enable debug mode'
    required: false
    default: 'false'
  BITOPS_IMAGE:
    description: 'Set to override the BitOps image to use for the deployment.  Defaults to `bitovi/bitops:latest`.'
    required: false
    default: 'bitovi/bitops:latest'

outputs:
  vm_url:
    description: "The URL of the generated app"
    value: ${{ steps.deploy.outputs.vm_url }}

runs:
  using: 'composite'
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Deploy with BitOps
      id: deploy
      shell: bash
      env:
        GITHUB_ACTION_PATH: ${{ github.action_path }}
        BITOPS_ENVIRONMENT: deployment
        TERRAFORM_TARGETS: ${{ inputs.targets }}
        ARM_CLIENT_ID: ${{ inputs.AZURE_ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ inputs.AZURE_ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.AZURE_ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ inputs.AZURE_ARM_TENANT_ID }}
        AZURE_STORAGE_ACCOUNT: ${{ inputs.AZURE_STORAGE_ACCOUNT }}
        AZURE_STORAGE_SKU: ${{ inputs.AZURE_STORAGE_SKU }}
        azure_resource_identifier: ${{ inputs.azure_resource_identifier }}
        azure_vm_admin_username: ${{ inputs.azure_vm_admin_username }}
        azure_vm_admin_password: ${{ inputs.azure_vm_admin_password }}
        AZURE_DEFAULT_REGION: ${{ inputs.AZURE_DEFAULT_REGION }}
        TF_STATE_BUCKET: ${{ inputs.tf_state_bucket }}
        TF_STATE_BUCKET_DESTROY: ${{ inputs.tf_state_bucket_destroy }}
        REPO_ENV: ${{ inputs.repo_env }}
        GHS_ENV: ${{ inputs.dot_env }}
        GHV_ENV: ${{ inputs.ghv_env }}
        AWS_SECRET_ENV: ${{ inputs.aws_secret_env }}
        APP_PORT: ${{ inputs.app_port }}
        LB_PORT: ${{ inputs.lb_port }}
        LB_HEALTHCHECK: ${{ inputs.lb_healthcheck }}
        AZURE_VM_SIZE: ${{ inputs.azure_vm_size }}
        STACK_DESTROY: ${{ inputs.stack_destroy }}
        DOMAIN_NAME: ${{ inputs.domain_name }}
        SUB_DOMAIN: ${{ inputs.sub_domain }}
        ROOT_DOMAIN: ${{ inputs.root_domain }}
        NO_CERT: ${{ inputs.no_cert }}
        BITOPS_FAST_FAIL: 'true'
        DOCKER_FULL_CLEANUP: ${{ inputs.docker_full_cleanup }}
        APP_DIRECTORY: ${{ inputs.app_directory }}
        APP_DIRECTORY_CLEANUP: ${{ inputs.app_directory_cleanup }}
        APPLICATION_MOUNT_TARGET: ${{ inputs.application_mount_target }}
        DATA_MOUNT_TARGET: ${{ inputs.data_mount_target }}
        ADDITIONAL_TAGS: ${{ inputs.additional_tags }}
        DEBUG_MODE: ${{ inputs.DEBUG_MODE }}
     
      run: |
        echo "running operations/_scripts/deploy/deploy.sh"
        $GITHUB_ACTION_PATH/operations/_scripts/deploy/deploy.sh
        echo "running operations/_scripts/deploy/export_vars.sh"
        $GITHUB_ACTION_PATH/operations/_scripts/deploy/export_vars.sh

    # output results to GitHub
    - if: ${{ success() && steps.deploy.outputs.vm_url != '' }}
      name: Print result created
      shell: bash
      run: |
        echo "## VM Created! :rocket:" >> $GITHUB_STEP_SUMMARY
        echo " ${{ steps.deploy.outputs.vm_url }}" >> $GITHUB_STEP_SUMMARY
    - if: ${{ success() && steps.deploy.outputs.vm_url == '' && inputs.stack_destroy == 'true' && inputs.tf_state_bucket_destroy == 'false' }}
      name: Print result destroyed
      shell: bash
      run: |
        echo "## VM Destroyed! :boom:" >> $GITHUB_STEP_SUMMARY
        echo "Infrastructure should be gone now!" >> $GITHUB_STEP_SUMMARY
    - if: ${{ success() && steps.deploy.outputs.vm_url == '' && inputs.stack_destroy == 'true' && inputs.tf_state_bucket_destroy == 'true' }}
      name: Print result destroyed
      shell: bash
      run: |
        echo "## VM Destroyed! :boom:" >> $GITHUB_STEP_SUMMARY
        echo "Buckets and infrastructure should be gone now!" >> $GITHUB_STEP_SUMMARY
    - if: ${{ success() && steps.deploy.outputs.vm_url == '' && inputs.stack_destroy == 'false' }}
      name: Print result destroyed
      shell: bash
      run: |
        echo "## Deploy finished! But no URL found. :thinking: " >> $GITHUB_STEP_SUMMARY
        echo "If expecting an URL, please check the logs for possible  errors." >> $GITHUB_STEP_SUMMARY
        echo "If you consider this is a bug in the Github Action, please submit an issue to our repo." >> $GITHUB_STEP_SUMMARY
    - if: ${{ failure() }} 
      name: Print error result
      shell: bash
      run: |
        echo "## Workflow failed to run :fire:" >> $GITHUB_STEP_SUMMARY
        echo "Please check the logs for possible errors." >> $GITHUB_STEP_SUMMARY
        echo "If you consider this is a bug in the Github Action, please submit an issue to our repo." >> $GITHUB_STEP_SUMMARY
